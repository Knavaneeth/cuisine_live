<?php 

 ini_set('display_errors', 1);
  			 ini_set('display_startup_errors', 1);
			 error_reporting(E_ALL);

$this->renderPartial('/front/banner-receipt',array(
   'h1'=>t("Payment"),
   'sub_text'=>t("")
));

$this->renderPartial('/front/order-progress-bar',array(
   'step'=>4,
   'show_bar'=>true
));

$data='';
$data2='';
$params='';
$error='';
$merchant_id='';
$ok=false;

		$dir = dirname(__FILE__);
		$host =getenv('REMOTE_ADDR');
        $applicationPath = $dir;		 
        $applicationEndpoint = $host.$applicationPath;

//		http://www.dreamguys.co.in/food/store/menu/merchant/

if ( $data=Yii::app()->functions->getOrder($_GET['id'])){
	$failure_redirect_url = Yii::app()->request->baseUrl.'/store/menu/merchant/'.$data['restaurant_slug'];
	$merchant_id=$data['merchant_id'];	
	$json_details=!empty($data['json_details'])?json_decode($data['json_details'],true):false;
	//dump($json_details);
	 $total_amount = $data['sub_total']+$data['delivery_charge']+$data['taxable_total']+$data['packaging']+$data['cart_tip_value'];	
	if ( $json_details !=false){
		$p_arams=array( 
		   'merchant_id'=>$data['merchant_id'],
		   'delivery_type'=>$data['trans_type']
		);		
		Yii::app()->functions->displayOrderHTML($p_arams,$json_details,true);
		if ( Yii::app()->functions->code==1){
			$ok=true;
		}
	}	
}

if ( $ok==TRUE){
   $data2=Yii::app()->functions->details['raw'];         
   $citypay_con=Yii::app()->functions->getCityPayConnection($merchant_id);  
   
   /*get admin paypal connection if merchant is commission*/
   if ( Yii::app()->functions->isMerchantCommission($merchant_id)){
   	   unset($citypay_con);   	   
   	   $citypay_con=Yii::app()->functions->getCityPayConnectionAdmin();   	   
   }      
   
 //  if ( !empty($citypay_con[$citypay_con['mode']]['user'])){   	     
	
       
			                         
        define('MERCHANT_ID', "31116985");
        define('LICENCE_KEY', "SMR4S4UNEX94HMQ1");		
        $request = array();
        //
        //  Assign values to the mandatory fields of the Payment Transaction Request
        //  and any optional fields as required. 
        //
        $request['merchantid'] = MERCHANT_ID;
        $request['licenceKey'] = LICENCE_KEY;
        $request['test'] = "true";
        $request['identifier'] = "php-integration-test";
        $request['amount'] = $total_amount * 100 ;
        //
        //  Assign the host, application path and application endpoint values
        //  to temporary variables to enable reuse.
        //
       
        //
        //  Construct an associative array for the Payment Transaction configuration,
        //  and assign it to the $request associative array with the index 'config'.
        //
        $request['config'] = array();

        //
        //  Assign values to the relevant fields of the Payment Transaction configuration
        //  associative array to guide processing and Merchant Application integration by
        //  the Paylink Payment Form and the Paylink server.
        //
        $request['config']['postback_policy'] = 'async';
        $request['config']['postback'] = 'http://'.$applicationEndpoint.'?postback=false';
        $request['config']['redirect_success'] = 'http://'.$applicationEndpoint.'?success';
        $request['config']['redirect_failure'] = 'http://'.$applicationEndpoint.'?failure';
        //
        //  Generate a JSON representation of the $request associative array
        //  using PECL json.
        //
        $jsonEncodedRequest = json_encode($request);

        //
        //  Open a temporary stream for the purpose of collecting verbose connection
        //  information generated by cURL. This is useful for tracing into SSL
        //  certificate-related connectivity issues.
        //
        $curl_stderr = fopen('php://temp', 'w+');

        //
        //	Initialise an associative array containing the configuration required
        //  for the cURL-based request.
        //
        $curl_opts = array(
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => $jsonEncodedRequest,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_HTTPHEADER => array(
                        'Accept: application/json',
                        'Content-Type: application/json;charset=UTF-8',
                        'Content-Length: '.strlen($jsonEncodedRequest)
                    ),
                CURLOPT_VERBOSE => true,
                CURLOPT_STDERR => $curl_stderr
            );

        //
        //  Initialise the cURL request.
        //
        $ch = curl_init('https://secure.citypay.com/paylink3/create');

        //
        //	Configure the cURL request with the configuration provided
        //  by the associative array.
        //
        curl_setopt_array($ch, $curl_opts);

        // 
        //	Open the cURL request and receive the response (if any)
        //
        $httpsResponse = curl_exec($ch);
        //
//  If cURL is unable to complete the HTTP request for whatever reason,
//  it will return FALSE (which may be tested using the PHP empty function).
//
//  If the cURL HTTP request was completed and the response generated is
//  not empty -
//
if (!empty($httpsResponse))
{
	//
	//	Close and dispose of the temporary stream used to receive connection-
	//  related output generated by cURL in the course of processing the
	//  HTTP request.
	//
	fclose($curl_stderr);

    //
    //  Get the HTTP response code received from the remote server and, if
	//  necessary, any further diagnostic or process-related information
	//	from the cURL request object.
    //
    $httpsResponseCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

    //
    //	Close the cURL request object to release system resources associated
	//	with it.
    //
    curl_close($ch);

    //
    //  If the HTTP POST request was reported as having been
    //  successfully completed by the Paylink server -
    //
    if ($httpsResponseCode == 200)
    {    
        //
        //  1. De-serialize the JSON formatted message body to
        //     form an object, of an anonymous class, structured
        //     to contain properties that mirror those of the
        //     JSON packet.
        //
        $decodedResponse = json_decode($httpsResponse);      		 
		// print_r($decodedResponse);
        //
        //  2.  Process the Payment Transaction Response.
        //
        if ($decodedResponse->result == 0x01)
        {
            //
		    //  The Paylink server has generated and returned a Payment Token
            //  and a URL to which the Customer Browser may be referred to
            //  complete the Payment Transaction using the Paylink Payment Form.
            //
            $token = $decodedResponse->id;
            $url = $decodedResponse->url;
            
            //
            //  TODO: Redirect Customer Browser to Paylink Payment Form (see below)
            //
            //  OR
            //
            //  TODO: Embed link to Paylink Payment Form in HTTP Response (see below)
            //
        }
        else
        {
            //
            //  The Paylink server has encountered Payment Transaction Request
            //  authentication, validation or other upstream errors while processing
            //  the Payment Transaction Request.
            //
            //  TODO: Handle Payment Transaction Request processing errors (see below)
            //
        }		
    }
	else
	{
        //
        //  The Paylink server has generated a HTTP response code that
        //  indicates that an error has occurred.
        //
        //  TODO: Handle Payment Transaction Request non-200 HTTP response codes (see below)
        //
	}
    }
    else
    {
            //
            //	Move the file pointer associated with the temporary stream used to
            //  receive connection processing output generated by cURL back to the
            //  start of the file.
            //
        rewind($curl_stderr);

            //
            //	Get the contents of the temporary stream used to receive connection
            //	processing output generated by cURL.
            //
        $req_stderr = stream_get_contents($curl_stderr, 4096);

            //
            //	Close the dispose of the temporary stream used to receive connection 
            //  processing output generated by cURL.
            //
        fclose($curl_stderr);

        //
        //  Obtain any diagnostic information from the cURL request object.
        //
        $req_errno = curl_errno($ch);
        $req_error = curl_error($ch);

        //
        //	Close the cURL request object to release system resources associated
            //	with it.
        //
        curl_close($ch);

            //
        //  TODO: Handle cURL HTTP connection error and log any relevant
        //        diagnostic information to a log file, as appropriate.
        //  
    }
  //  echo $url;
   // $result = http_redirect($url, array(), false, HTTP_REDIRECT_POST);
    print('<p><a href="'
        .$url
        .'">Click here for the City Payment Form</p>'
    );
       
     }  
       
       
//	   
  // } else $error=Yii::t("default","Merchant Citypay Credential not yet been set.");
 
?>

<div class="sections section-grey2 section-orangeform">
  <div class="container">  
    <div class="row top30">
       <div class="inner">
          <h1><?php echo t("Pay using CityPay")?></h1>
          <div class="box-grey rounded">	
          
          <?php if ( !empty($error)):?>
           <p class="text-danger"><?php echo $error;?></p>  
          <?php else :?> 
           <p><?php echo t("Please wait while we redirect you to CityPay.")?></p>
          <?php endif;?>
               
          </div> <!--box-->
       </div> <!--inner-->
    </div> <!--row-->
  </div> <!--container-->
</div><!-- sections-->
