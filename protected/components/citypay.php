<?php
define(MERCHANT_ID, "<merchant_id>");
define(LICENCE_KEY, "<licence_key>");

$request = array();

//  Assign values to the mandatory fields of the Payment Transaction Request
//  and any optional fields as required. 

$request['merchantid'] = MERCHANT_ID;
$request['licenceKey'] = LICENCE_KEY;
$request['test']       = "true";
$request['identifier'] = "php-integration-test";
$request['amount']     = 5000;

//  Assign the host, application path and application endpoint values
//  to temporary variables to enable reuse.
//
$host                = $_SERVER['HTTP_HOST'];
$applicationPath     = $_SERVER['PHP_SELF'];
$applicationEndpoint = $host.$applicationPath;

$request['config'] = array();
 
//  Assign values to the relevant fields of the Payment Transaction configuration
//  associative array to guide processing and Merchant Application integration by
//  the Paylink Payment Form and the Paylink server.
//
$request['config']['postback_policy']  = 'async';
$request['config']['postback']         = 'http://'.$applicationEndpoint.'?postback=false';
$request['config']['redirect_success'] = 'http://'.$applicationEndpoint.'?success';
$request['config']['redirect_failure'] = 'http://'.$applicationEndpoint.'?failure';

//
//  Generate a JSON representation of the $request associative array
//  using PECL json.
//
$jsonRequest = json_encode($request);
    
//
//  Construct a new http\Client\Request object configured for a POST operation
//  to the relevant URI for the Paylink server.
//
$httpsRequest = new http\Client\Request('POST', 'https://secure.citypay.com/paylink3/create');
$httpsRequest->setContentType('application/json');
$httpsRequest->getBody()->append($jsonRequest);

//
//  Construct a new http\Client object, enqueue the newly created $httpsRequest
//  object and send the enqueued requests.
//
$client = new http\Client();
$client->enqueue($httpsRequest);
$client->send();


//
//  Wait for the response to the enqueued http\Client\Request
//  objects.
//
$client->wait();

//
//  Extract the http\Message\Body from the response object
//  associated with the relevant http\Client\Request object.
//
$httpsResponse = $client->getResponse($httpsRequest);

//
//  Get the HTTP response code for the relevant HTTP POST
//  request.
//
$httpsResponseCode = $httpsResponse->getResponseCode();

//
//  If the HTTP POST request was reported as having been
//  successfully completed by the Paylink server -
//
if ($httpsResponseCode == 200)
{  
    //
    //  1. Extract the message body from the HTTP response
    //     generated by the Paylink server.
    //
    $jsonResponse = $httpsResponse->getBody()->toString();

    //
    //  2. De-serialize the JSON formatted message body to
    //     form an object, of an anonymous class, structured
    //     to contain properties that mirror those of the
    //     JSON packet.
    //
    $decodedResponse = json_decode($jsonResponse);
    
    //
    //  3.  Process the Payment Transaction Response.
    //
    if ($decodedResponse->result == 0x01)
    {
        //
		//  The Paylink server has generated and returned a Payment Token
        //  and a URL to which the Customer Browser may be referred to
        //  complete the Payment Transaction using the Paylink Payment Form.
        //
        $token = $decodedResponse->id;
        $url = $decodedResponse->url;
            
        //
        //  TODO: Redirect Customer Browser to Paylink Payment Form (see below)
        //
        //  OR
        //
        //  TODO: Embed link to Paylink Payment Form in HTTP Response (see below)
        //
    }
    else
    {
        //
        //  The Paylink server has encountered Payment Transaction Request
        //  authentication, validation or other upstream errors while processing
        //  the Payment Transaction Request.
        //
        //  TODO: Handle Payment Transaction Request processing errors (see below)
        //
    }
}
else
{
    //
    //  The Paylink server has generated a HTTP response code that
    //  indicates that an error has occurred.
    //
    //  TODO: Handle Payment Transaction Request non-200 HTTP response codes (see below)
    //
}








?>